"use strict";(self.webpackChunkbenchmarking=self.webpackChunkbenchmarking||[]).push([[436],{436:(u,r,t)=>{t.r(r),t.d(r,{MergeTestComponent:()=>d});var o=t(6895),m=t(7579),l=t(9646),p=t(1005),_=t(8505),c=t(6451),T=t(1028),h=t(1323),e=t(4650);let d=(()=>{class n{constructor(){this.codeSnippet="\n  streams = [this.makeStream(1),\n    this.makeStream(2),\n    this.makeStream(3)];\n  mergeStream$ = merge(...this.streams)\n  ",this.emitStream$=new m.x,this.runStream$=new m.x,this.subscribeStartTime=Date.now(),this.endTime=Number.NEGATIVE_INFINITY,this.makeStream=a=>(0,l.of)(a).pipe((0,p.g)(1e3*Math.random()+1e3),(0,_.b)(()=>this.runStream$.next({label:`${a}`,time:Date.now()}))),this.streams=[this.makeStream(1),this.makeStream(2),this.makeStream(3)],this.mergeStream$=(0,c.T)(...this.streams)}ngOnInit(){}doSubscribe(){this.subscribeStartTime=Date.now(),this.mergeStream$.subscribe({next:a=>{this.emitStream$.next({label:`${a}`,time:Date.now()})},complete:()=>{this.endTime=Date.now(),this.emitStream$.complete(),this.runStream$.complete()}})}}return n.\u0275fac=function(a){return new(a||n)},n.\u0275cmp=e.Xpm({type:n,selectors:[["app-concat-test"]],standalone:!0,features:[e.jDz],decls:12,vars:7,consts:[[3,"codeSnippet"],[3,"click"],[1,"observable_area"],["title","Emits",3,"endTime","startTime","stream$"],["title","Runs",3,"endTime","startTime","stream$"]],template:function(a,s){1&a&&(e._UZ(0,"app-code-snippet",0),e.TgZ(1,"button",1),e.NdJ("click",function(){return s.doSubscribe()}),e._uU(2,"Do subscribe"),e.qZA(),e.TgZ(3,"div",2)(4,"p"),e._uU(5,"merge will run all streams in parallel, and emit each one as it completes"),e.qZA(),e.TgZ(6,"p"),e._uU(7,"it's syntax is also a bit weird; it takes a list of arguments, not an array, ergo ...[] it"),e.qZA(),e.TgZ(8,"p"),e._uU(9,"Good to quickly complete all streams in parallel and emit each time (procedural loading)"),e.qZA(),e._UZ(10,"app-observable-graph",3)(11,"app-observable-graph",4),e.qZA()),2&a&&(e.Q6J("codeSnippet",s.codeSnippet),e.xp6(10),e.Q6J("endTime",s.endTime)("startTime",s.subscribeStartTime)("stream$",s.emitStream$),e.xp6(1),e.Q6J("endTime",s.endTime)("startTime",s.subscribeStartTime)("stream$",s.runStream$))},dependencies:[T.N,h.H,o.ez],styles:[".observable_area[_ngcontent-%COMP%]{max-width:400px}"]}),n})()}}]);