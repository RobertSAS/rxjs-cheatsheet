"use strict";(self.webpackChunkbenchmarking=self.webpackChunkbenchmarking||[]).push([[53],{3053:(h,o,e)=>{e.r(o),e.d(o,{ConcatTestComponent:()=>S});var m=e(6895),c=e(4707),u=e(7579),_=e(8505),g=e(7272),l=e(4654),s=e(4870),t=e(4650);let S=(()=>{class a{constructor(){this.codeSnippet="\n  private streams = [makeStream(1, this.runStream$),\n    makeStream(2, this.runStream$),\n    makeStream(3, this.runStream$),\n    this.triggerStream$\n  ];\n  testStream$ = concat(...this.streams)\n  ",this.triggerStreamSubject$=new c.t(1),this.runStream$=new u.x,this.triggerStream$=this.triggerStreamSubject$.pipe((0,_.b)(r=>this.runStream$.next({label:`${r}`,time:Date.now()}))),this.triggerCount=0,this.streams=[(0,s.lV)(1,this.runStream$),(0,s.lV)(2,this.runStream$),(0,s.lV)(3,this.runStream$),this.triggerStream$],this.testStream$=(0,g.z)(...this.streams)}doTrigger(){this.triggerStreamSubject$.next(""+this.triggerCount++)}}return a.\u0275fac=function(r){return new(r||a)},a.\u0275cmp=t.Xpm({type:a,selectors:[["app-concat-test"]],standalone:!0,features:[t.jDz],decls:9,vars:3,consts:[[3,"codeSnippet","runStream$","testStream$"],[3,"click"]],template:function(r,n){1&r&&(t.TgZ(0,"app-observable-area",0)(1,"p"),t._uU(2,"concat will run all streams in a row, emitting each value as it goes"),t.qZA(),t.TgZ(3,"p"),t._uU(4,"it's syntax is also a bit weird; it takes a list of arguments, not an array, ergo ...[] it"),t.qZA(),t.TgZ(5,"p"),t._uU(6,"Good for having an ordered execution of streams"),t.qZA(),t.TgZ(7,"button",1),t.NdJ("click",function(){return n.doTrigger()}),t._uU(8,"Do Trigger"),t.qZA()()),2&r&&t.Q6J("codeSnippet",n.codeSnippet)("runStream$",n.runStream$)("testStream$",n.testStream$)},dependencies:[m.ez,l.U],styles:[".observable_area[_ngcontent-%COMP%]{max-width:400px}"]}),a})()}}]);