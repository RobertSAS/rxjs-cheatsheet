"use strict";(self.webpackChunkbenchmarking=self.webpackChunkbenchmarking||[]).push([[640],{9429:(A,h,t)=>{t.r(h),t.d(h,{ForkJoinTestComponent:()=>j});var d=t(7579),v=t(9751),$=t(4742),g=t(8421),k=t(3269),y=t(5403),C=t(3268),J=t(1810),T=t(6895),V=t(4654),a=t(4870),e=t(4650);let j=(()=>{class n{constructor(){this.codeSnippet="\n  testStream$ = forkJoin([\n    this.makeStream(1),\n    this.makeStream(2),\n    this.makeStream(3),\n    this.makeStream(4),\n    this.makeStream(5),\n    this.makeStream(6),\n    this.makeStream(7)\n  ])\n  ",this.runStream$=new d.x,this.testStream$=function O(...n){const o=(0,k.jO)(n),{args:r,keys:s}=(0,$.D)(n),p=new v.y(l=>{const{length:m}=r;if(!m)return void l.complete();const c=new Array(m);let u=m,f=m;for(let i=0;i<m;i++){let S=!1;(0,g.Xf)(r[i]).subscribe((0,y.x)(l,F=>{S||(S=!0,f--),c[i]=F},()=>u--,void 0,()=>{(!u||!S)&&(f||l.next(s?(0,J.n)(s,c):c),l.complete())}))}});return o?p.pipe((0,C.Z)(o)):p}([(0,a.lV)(1,this.runStream$),(0,a.lV)(2,this.runStream$),(0,a.lV)(3,this.runStream$),(0,a.lV)(4,this.runStream$),(0,a.lV)(5,this.runStream$),(0,a.lV)(6,this.runStream$),(0,a.lV)(7,this.runStream$)])}}return n.\u0275fac=function(r){return new(r||n)},n.\u0275cmp=e.Xpm({type:n,selectors:[["app-fork-join-test"]],standalone:!0,features:[e.jDz],decls:5,vars:3,consts:[[3,"codeSnippet","runStream$","testStream$"]],template:function(r,s){1&r&&(e.TgZ(0,"app-observable-area",0)(1,"p"),e._uU(2,"forkJoin will spin up all streams in parallel and then emit once as an array (which is in same order as original array)"),e.qZA(),e.TgZ(3,"p"),e._uU(4,"Good to quickly complete all streams in parallel and emit once (load all at once)"),e.qZA()()),2&r&&e.Q6J("codeSnippet",s.codeSnippet)("runStream$",s.runStream$)("testStream$",s.testStream$)},dependencies:[T.ez,V.U],styles:[".observable_area[_ngcontent-%COMP%]{max-width:400px}"]}),n})()}}]);