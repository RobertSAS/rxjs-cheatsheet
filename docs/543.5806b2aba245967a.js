"use strict";(self.webpackChunkbenchmarking=self.webpackChunkbenchmarking||[]).push([[543],{3543:(S,r,t)=>{t.r(r),t.d(r,{CombineLatestTest:()=>d});var _=t(6895),p=t(4707),a=t(7579),m=t(8505),c=t(9646),h=t(1005),b=t(9841),u=t(2722),T=t(1028),g=t(1323),e=t(4650);let d=(()=>{class n{constructor(){this.codeSnippet="\n  combineLatestStream$ = combineLatest([\n    this.makeStream(1),\n    this.makeStream(2),\n    this.makeStream(3),\n    this.triggerStream$\n  ])\n  ",this.triggerStreamSubject$=new p.t(1),this.emitStream$=new a.x,this.runStream$=new a.x,this.triggerStream$=this.triggerStreamSubject$.pipe((0,m.b)(s=>this.runStream$.next({label:`${s}`,time:Date.now()}))),this.subscribeStartTime=Date.now(),this.endTime=Number.NEGATIVE_INFINITY,this.triggerCount=0,this.destroy$=new a.x,this.makeStream=s=>(0,c.of)(s).pipe((0,h.g)(1e3*Math.random()+1e3),(0,m.b)(()=>this.runStream$.next({label:`${s}`,time:Date.now()}))),this.combineLatestStream$=(0,b.a)([this.makeStream(1),this.makeStream(2),this.makeStream(3),this.triggerStream$])}ngOnInit(){}doSubscribe(){this.subscribeStartTime=Date.now(),this.combineLatestStream$.pipe((0,u.R)(this.destroy$)).subscribe({next:s=>{this.emitStream$.next({label:`${s}`,time:Date.now()})},complete:()=>{this.emitStream$.complete(),this.runStream$.complete(),this.triggerStreamSubject$.complete()}})}doComplete(){this.endTime=Date.now(),this.destroy$.next()}doTrigger(){this.triggerStreamSubject$.next(""+this.triggerCount++)}ngOnDestroy(){this.doComplete()}}return n.\u0275fac=function(s){return new(s||n)},n.\u0275cmp=e.Xpm({type:n,selectors:[["app-concat-test"]],standalone:!0,features:[e.jDz],decls:18,vars:7,consts:[[3,"codeSnippet"],[3,"click"],[1,"observable_area"],["title","Emits",3,"endTime","startTime","stream$"],["title","Runs",3,"endTime","startTime","stream$"]],template:function(s,i){1&s&&(e._UZ(0,"app-code-snippet",0),e.TgZ(1,"button",1),e.NdJ("click",function(){return i.doSubscribe()}),e._uU(2,"Do subscribe"),e.qZA(),e.TgZ(3,"button",1),e.NdJ("click",function(){return i.doTrigger()}),e._uU(4,"Do Trigger"),e.qZA(),e.TgZ(5,"button",1),e.NdJ("click",function(){return i.doComplete()}),e._uU(6,"Do Complete"),e.qZA(),e.TgZ(7,"div",2)(8,"p"),e._uU(9,"combineLatest is a bit like merge and forkJoin"),e.qZA(),e.TgZ(10,"p"),e._uU(11,"this will execute all streams in parallel, and then emit when all have emitted at least once"),e.qZA(),e.TgZ(12,"p"),e._uU(13,"and then it will emit all the latest values when anyone updates"),e.qZA(),e.TgZ(14,"p"),e._uU(15,"Good for combining multiple inputs into one output"),e.qZA(),e._UZ(16,"app-observable-graph",3)(17,"app-observable-graph",4),e.qZA()),2&s&&(e.Q6J("codeSnippet",i.codeSnippet),e.xp6(16),e.Q6J("endTime",i.endTime)("startTime",i.subscribeStartTime)("stream$",i.emitStream$),e.xp6(1),e.Q6J("endTime",i.endTime)("startTime",i.subscribeStartTime)("stream$",i.runStream$))},dependencies:[T.N,g.H,_.ez],styles:[".observable_area[_ngcontent-%COMP%]{max-width:400px}"]}),n})()}}]);